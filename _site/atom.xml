<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>进击的大黄</title>
  <link href="//atom.xml" rel="self"/>
  <link href=""/>
  <updated>2016-06-07T10:33:08+08:00</updated>
  <id></id>
  <author>
    <name>Huang rp</name>
  </author>

  
  <entry>
    <title>web开发那些事儿</title>
    <link href="/2016/06/07/web-tools/"/>
    <updated>2016-06-07T00:00:00+08:00</updated>
    <id>/2016/06/07/web-tools</id>
    <content type="html">工具

Postman

在学习elasticsearch过程中，需要不断的put数据进行测试，直接使用curl -d实在是不方便。而且，put和get的都是json数据，正好之前看到了有一个chrome插件,postman,正好可以用起来。
下图是PUT JSON数据的设置

</content>
  </entry>
  
  <entry>
    <title>基于logstash构建日志系统</title>
    <link href="/2016/06/06/logstash-elasticsearch/"/>
    <updated>2016-06-06T00:00:00+08:00</updated>
    <id>/2016/06/06/logstash-elasticsearch</id>
    <content type="html">logstash

环境准备

logstash的两种

错误：

测试logstash

The -e flag enables you to specify a configuration directly from the command line.
https://www.elastic.co/guide/en/logstash/current/first-event.html
➜ /usr/local/Cellar/logstash/2.3.2/bin git:(master)&amp;gt;pwd
/usr/local/Cellar/logstash/2.3.2/bin
➜ /usr...</content>
  </entry>
  
  <entry>
    <title>aop的那点事儿</title>
    <link href="/2016/06/03/mac-brew/"/>
    <updated>2016-06-03T00:00:00+08:00</updated>
    <id>/2016/06/03/mac-brew</id>
    <content type="html">brew install redis
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/redis-3.0.7.el_capitan.bottle.1.tar.gz

################################################################## 100.0%

==&amp;gt; Pouring redis-3.0.7.el_capitan.bottle.1.tar.gz
==&amp;gt; Caveats
To have launchd start redis now and re...</content>
  </entry>
  
  <entry>
    <title>java 队列</title>
    <link href="/2016/06/02/java-concurrent-queue/"/>
    <updated>2016-06-02T00:00:00+08:00</updated>
    <id>/2016/06/02/java-concurrent-queue</id>
    <content type="html">non-blocking queue(非阻塞队列)

ConcurrentLinkedQueue

基于 链表 节点的无界 非阻塞 线程安全 队列，队列元素 先进先出，不允许空元素。
peek() 获取但不删除head节点
offer() 插入元素到tail节点
pool()  获取并删除head节点

blocking queue(阻塞队列)



方法\处理方式
抛出异常
返回特殊值
一直阻塞
超时退出



插入方法
add(e)
offer(e)
put(e)
offer(e,time,unit)


移除方法
remove()
pool()
take()
poll(time,u...</content>
  </entry>
  
  <entry>
    <title>java volatile关键字</title>
    <link href="/2016/06/01/java-volatile/"/>
    <updated>2016-06-01T00:00:00+08:00</updated>
    <id>/2016/06/01/java-volatile</id>
    <content type="html">下面摘自《深入理解java虚拟机》 


原子性、可见性与有序性Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这三个特征来建立的：
原子性（Atomicity）：由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write这六个，我们大致可以认为基本数据类型的访问读写是具备原子性的。在synchronized块之间的操作也具备原子性。
可见性（Visibility）：可见性就是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。
有序性（Ordering）：Java程序中天然的有序性可以总结为一句话：如果在...</content>
  </entry>
  
  <entry>
    <title>concurrent包学习实践</title>
    <link href="/2016/05/27/java-concurrent/"/>
    <updated>2016-05-27T00:00:00+08:00</updated>
    <id>/2016/05/27/java-concurrent</id>
    <content type="html">CountDownLatch

测试代码
https://github.com/javahuang/rp-study/blob/master/blog/src/main/java/concurrent/CountDownLatchTest1.java
描述
A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.
构造的时候初始化一个count，每次countDown()会将count...</content>
  </entry>
  
  <entry>
    <title>css3学习</title>
    <link href="/2016/05/27/css3/"/>
    <updated>2016-05-27T00:00:00+08:00</updated>
    <id>/2016/05/27/css3</id>
    <content type="html">工具

css Gradient工具：http://www.colorzilla.com/gradient-editor/

测试demo:http://hrps.me/demo/css3/transition-animation.html

gradient

渐变


线性渐变



径向渐变



线性重复渐变





CSS3 Transitions、Transforms、Animation

过度、变换、动画

Transitions

从一个状态过度到另外一个状态的,如从正常到 :hover
transition有下面些具体属性：


transition-property...</content>
  </entry>
  
  <entry>
    <title>css学习</title>
    <link href="/2016/05/27/css/"/>
    <updated>2016-05-27T00:00:00+08:00</updated>
    <id>/2016/05/27/css</id>
    <content type="html">例子

demo
http://hrps.me/demo/css/line-height-and-vertical-align.html

块级元素属性

line-height

height和line-height都是块级元素，line-height里面的元素表现为垂直居中

行级元素属性

vertical-align

说明
该属性定义行内元素的基线相对于该元素所在行的基线的垂直对齐。允许指定负长度值和百分比值。这会使元素降低而不是升高。在表单元格中，这个属性会设置单元格框中的单元格内容的对齐方式。
默认值是baseline，基线对其，涉及到x-height，

backgrou...</content>
  </entry>
  
  <entry>
    <title>Java语言编码规范(Java Code Conventions)</title>
    <link href="/2016/05/26/javacodeconv/"/>
    <updated>2016-05-26T00:00:00+08:00</updated>
    <id>/2016/05/26/javacodeconv</id>
    <content type="html">http://morningspace.51.net/resource/javacodeconv.html#a1

1 介绍(Introduction)

1.1 为什么要有编码规范(Why Have Code Conventions)

编码规范对于程序员而言尤为重要，有以下几个原因：


一个软件的生命周期中，80%的花费在于维护
几乎没有任何一个软件，在其整个生命周期中，均由最初的开发人员来维护
编码规范可以改善软件的可读性，可以让程序员尽快而彻底地理解新的代码
如果你将源码作为产品发布，就需要确任它是否被很好的打包并且清晰无误，一如你已构建的其它任何产品


为了执行规范，每个软...</content>
  </entry>
  
  <entry>
    <title>linux使用笔记</title>
    <link href="/2016/05/25/linux/"/>
    <updated>2016-05-25T00:00:00+08:00</updated>
    <id>/2016/05/25/linux</id>
    <content type="html">基础知识

shell

shell是linux/unix的一个外壳，负责与linux内核交换。
用户登录时，会读取/etc/profile,~/.profile，如果当前shell是bash，还会读取(如果存在)~/.bash_profile,
# 查看目前系统有几种shell
cat /etc/shells
# 查看当前使用的shell
echo $SHELL
# 切换shell
chsh -s /bin/zsh
# 显示 shell变量
set
# 显示 用户变量(与使用哪种shell无关)
env
# shell变量导出为用户变量
export aa=bb
# 清除用户变量
un...</content>
  </entry>
  
  <entry>
    <title>java.util.stream包描述翻译</title>
    <link href="/2016/05/23/java-util-stream-translate/"/>
    <updated>2016-05-23T00:00:00+08:00</updated>
    <id>/2016/05/23/java-util-stream-translate</id>
    <content type="html">Package java.util.stream.Description

部分练习代码见:https://github.com/javahuang/rp-study/blob/master/blog/src/main/java/j8/stream/StreamTest.java
支持对流元素函数式操作，比如集合里面的map-reduce变换
int sum = widgets.stream()
                      .filter(b -&amp;gt; b.getColor() == RED)
                      .mapToInt(b -&amp;gt...</content>
  </entry>
  
  <entry>
    <title>虚拟机性能监控与故障处理工具</title>
    <link href="/2016/05/17/jvm-tools/"/>
    <updated>2016-05-17T00:00:00+08:00</updated>
    <id>/2016/05/17/jvm-tools</id>
    <content type="html">jps：虚拟机进程状况工具

本地虚拟机ID(Local Virtual Machine Identifier)



选项
作用



-q
只输出LVMID，省略主类的名称


-m
输出虚拟机进程启动时传递给主类main(函数的参数


-l
输出主类的全名，如果进程执行的是Jar包，输出Jar路径


-v
输出虚拟机进程启动时JVM参数



jstat：虚拟机统计信息监视工具



选项
作用



-gc
监视java堆状况，包括Eden区，2个survivor区，老年代，永久代的容量，已用空间，GC时间合计等信息


-gcutil
输出虚拟机进程启动时传递给主类main...</content>
  </entry>
  
  <entry>
    <title>我理解的ForkJoinPoll</title>
    <link href="/2016/05/11/java-concurrent-forkjoinpool/"/>
    <updated>2016-05-11T00:00:00+08:00</updated>
    <id>/2016/05/11/java-concurrent-forkjoinpool</id>
    <content type="html">基础


A static commonPool() is available and appropriate for most applications. The common pool is used by any ForkJoinTask that is not explicitly submitted to a specified pool. Using the common pool normally reduces resource usage (its threads are slowly reclaimed during periods of non-use, and r...</content>
  </entry>
  
  <entry>
    <title>mapreduce及命令声明式编程</title>
    <link href="/2016/05/10/map-reduce-impreative-devlarative/"/>
    <updated>2016-05-10T00:00:00+08:00</updated>
    <id>/2016/05/10/map-reduce-impreative-devlarative</id>
    <content type="html">早晨在看java8的lambda表达式，在java8初体验看到了命令式编程和声明式编程的区别，在文章中的例子中用到了JavaScript数组的map和reduce函数，这两个函数在java和JavaScript的函数式编程中都常用到，就顺便翻了下用通俗易懂的大白话讲解Map/Reduce原理。

map reduce


map（映射）单独对每个元素进行操作，如执行过滤原始数据等；
reduce（化简）如将map操作的元素聚集在一起，获取结果；


命令式和声明式编程


命令式编程：命令机器如何做（how），你想要的（what），都会按你的命令实现。

var a=[1,2,3,4,5...</content>
  </entry>
  
  <entry>
    <title>Java8特性学习</title>
    <link href="/2016/05/10/java8-lambda/"/>
    <updated>2016-05-10T00:00:00+08:00</updated>
    <id>/2016/05/10/java8-lambda</id>
    <content type="html">default方法

在接口内定义一些默认实现，如 java.util.function.Predicate 定义了一个抽象方法用于lambda表达式接口，定义了若干default方法。
比如，在Collection定义了了几个Stream相关的default方法，能保持代码的向下兼容的同时也能加一些新的java8特性。
public interface SimpleInterface {
  public void doSomeWork();

  //A default method in the interface created using &amp;quot;default&amp;quot;...</content>
  </entry>
  
  <entry>
    <title>linux-expect</title>
    <link href="/2016/04/14/linux-expect/"/>
    <updated>2016-04-14T00:00:00+08:00</updated>
    <id>/2016/04/14/linux-expect</id>
    <content type="html">题记

在我没有搭建基于jenkins的持续集成平台时，项目都是我手动的打包，然后scp到linux服务器，再重启服务。期间，要重复的输入ssh的密码，我就想有没有一种简单的方式，能写一个脚本来一键进行这些操作。

语法：

#!/usr/bin/expect 告诉操作系统脚本代码使用哪一种shell执行
set timeout 300 设置超时时间，比如ssh时等待出现密码输入界面时间
spawn ssh root@192.168.1.100 spawn进入expect环境后，创建一个expect管理的与其他程序或者远程设备交互的session，用来传递交互指令。
expect &amp;qu...</content>
  </entry>
  
  <entry>
    <title>python基础语法学习记录笔记</title>
    <link href="/2016/01/11/python-learning/"/>
    <updated>2016-01-11T00:00:00+08:00</updated>
    <id>/2016/01/11/python-learning</id>
    <content type="html">第一天-基础语法

注释后面空一格，逗号后面空一格，函数前面空两行，行后面的注释要空两格，语句里面的= &amp;gt; &amp;lt;左右都要空一格
#!/usr/bin/env python
# coding=utf-8
# 设置文件字符集编码,不设置使用中文会报错
print &amp;quot;hello world&amp;quot;
# input and output
name = raw_input(&amp;#39;name:&amp;#39;)  # waiting user input
print name, &amp;#39;is who&amp;#39;  # str concat

# escape with \
pri...</content>
  </entry>
  
  <entry>
    <title>写在开始</title>
    <link href="/2015/05/14/blog-init/"/>
    <updated>2015-05-14T00:00:00+08:00</updated>
    <id>/2015/05/14/blog-init</id>
    <content type="html">初衷

之前看到javahen的博客挺不错的，简洁、清晰，但是一直没深入研究一下,我过去使用了一年的博客，从购买服务器、域名、备案，到软件环境的搭建以及整个博客代码的编写,都是自己一点点弄的。
代码放倒了github上，博客内容展示部分参考了苏洋的一个个人博客，后台是我自己写的一个cms，用的java+bootstrap+jqueryui，编辑器用的是百度的ueditor，中间缝缝补补了很多小细节。
这一年里，博客伴着我也发生了很多有趣的事情，最开始我给博客对鼻子和王楠开放了权限，他们只写了几篇博客就再也没上过了，我自己前后也写了116篇，从生活到工作。中间我的操作系统从用了多年的win...</content>
  </entry>
  
  <entry>
    <title>netty源码阅读笔记</title>
    <link href="/2015/05/04/netty-study/"/>
    <updated>2015-05-04T00:00:00+08:00</updated>
    <id>/2015/05/04/netty-study</id>
    <content type="html">AbstractBootstrap构建流程

channelFactory.newChannel()来创建NioServerSocketChannel
//AbstractBootstrap
private ChannelFuture doBind(final SocketAddress localAddress) {
        final ChannelFuture regFuture = initAndRegister();
        final Channel channel = regFuture.channel();
        if (regFuture.ca...</content>
  </entry>
  
</feed>
